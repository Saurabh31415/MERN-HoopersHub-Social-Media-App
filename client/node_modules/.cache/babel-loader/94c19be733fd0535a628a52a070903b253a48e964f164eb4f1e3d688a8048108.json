{"ast":null,"code":"//import { create } from \"@mui/material/styles/createTransitions\";\nimport{createSlice}from\"@reduxjs/toolkit\";// this data will be accessible throughout entire application and can be grabebd whenever we want.\nvar initialState={mode:\"light\",user:null,token:null,posts:[]};export var authSlice=createSlice({name:\"auth\",initialState:initialState,// actions or functions involve modifying the global state\nreducers:{setMode:function setMode(state){state.mode=state.mode===\"light\"?\"dark\":\"light\";},setLogin:function setLogin(state,action){state.user=action.payload.user;state.token=action.payload.token;},setLogout:function setLogout(state){state.user=null;state.token=null;},setFriends:function setFriends(state,action){if(state.user){state.user.friends=action.payload.friends;}else{console.error(\"user friends non-existent :(\");}},setPosts:function setPosts(state,action){state.posts=action.payload.posts;},setPost:function setPost(state,action){var updatedPosts=state.posts.map(function(post){if(post._id===action.payload.post_id)return action.payload.post;return post;});state.posts=updatedPosts;}}});var _authSlice$actions=authSlice.actions,setMode=_authSlice$actions.setMode,setLogin=_authSlice$actions.setLogin,setLogout=_authSlice$actions.setLogout,setFriends=_authSlice$actions.setFriends,setPosts=_authSlice$actions.setPosts,setPost=_authSlice$actions.setPost;// reducers are pure functions that contain the logic and calculation that needed to be performed on the state\nexport{setMode,setLogin,setLogout,setFriends,setPosts,setPost};export default authSlice.reducer;","map":{"version":3,"names":["createSlice","initialState","mode","user","token","posts","authSlice","name","reducers","setMode","state","setLogin","action","payload","setLogout","setFriends","friends","console","error","setPosts","setPost","updatedPosts","map","post","_id","post_id","actions","reducer"],"sources":["C:/Users/saura/Project/client/src/state/index.js"],"sourcesContent":["//import { create } from \"@mui/material/styles/createTransitions\";\r\nimport { createSlice } from \"@reduxjs/toolkit\";\r\n\r\n// this data will be accessible throughout entire application and can be grabebd whenever we want.\r\nconst initialState = {\r\n     mode: \"light\",\r\n     user: null,\r\n     token: null,\r\n     posts: [],\r\n};\r\n\r\nexport const authSlice = createSlice({\r\n    name: \"auth\",\r\n    initialState,\r\n    // actions or functions involve modifying the global state\r\n    reducers: {\r\n        setMode: (state) => {\r\n            state.mode = state.mode === \"light\" ? \"dark\" : \"light\";\r\n        },\r\n        setLogin: (state, action) => {\r\n            state.user = action.payload.user;\r\n            state.token = action.payload.token;\r\n        },\r\n        setLogout: (state) => {\r\n            state.user = null;\r\n            state.token = null;\r\n        },\r\n        setFriends: (state, action) => {\r\n            if(state.user) {\r\n                state.user.friends = action.payload.friends;\r\n            } else {\r\n                console.error(\"user friends non-existent :(\");\r\n            }\r\n        },\r\n        setPosts: (state, action) => {\r\n            state.posts = action.payload.posts;\r\n        },\r\n        setPost: (state, action) => {\r\n            const updatedPosts = state.posts.map((post) => {\r\n                if(post._id === action.payload.post_id) return action.payload.post;\r\n                return post;\r\n            });\r\n            state.posts = updatedPosts;\r\n        }\r\n    }\r\n});\r\n\r\nexport const { setMode, setLogin, setLogout, setFriends, setPosts, setPost } = authSlice.actions;\r\n// reducers are pure functions that contain the logic and calculation that needed to be performed on the state\r\nexport default authSlice.reducer;"],"mappings":"AAAA;AACA,OAASA,WAAW,KAAQ,kBAAkB,CAE9C;AACA,GAAMC,aAAY,CAAG,CAChBC,IAAI,CAAE,OAAO,CACbC,IAAI,CAAE,IAAI,CACVC,KAAK,CAAE,IAAI,CACXC,KAAK,CAAE,EACZ,CAAC,CAED,MAAO,IAAMC,UAAS,CAAGN,WAAW,CAAC,CACjCO,IAAI,CAAE,MAAM,CACZN,YAAY,CAAZA,YAAY,CACZ;AACAO,QAAQ,CAAE,CACNC,OAAO,CAAE,iBAACC,KAAK,CAAK,CAChBA,KAAK,CAACR,IAAI,CAAGQ,KAAK,CAACR,IAAI,GAAK,OAAO,CAAG,MAAM,CAAG,OAAO,CAC1D,CAAC,CACDS,QAAQ,CAAE,kBAACD,KAAK,CAAEE,MAAM,CAAK,CACzBF,KAAK,CAACP,IAAI,CAAGS,MAAM,CAACC,OAAO,CAACV,IAAI,CAChCO,KAAK,CAACN,KAAK,CAAGQ,MAAM,CAACC,OAAO,CAACT,KAAK,CACtC,CAAC,CACDU,SAAS,CAAE,mBAACJ,KAAK,CAAK,CAClBA,KAAK,CAACP,IAAI,CAAG,IAAI,CACjBO,KAAK,CAACN,KAAK,CAAG,IAAI,CACtB,CAAC,CACDW,UAAU,CAAE,oBAACL,KAAK,CAAEE,MAAM,CAAK,CAC3B,GAAGF,KAAK,CAACP,IAAI,CAAE,CACXO,KAAK,CAACP,IAAI,CAACa,OAAO,CAAGJ,MAAM,CAACC,OAAO,CAACG,OAAO,CAC/C,CAAC,IAAM,CACHC,OAAO,CAACC,KAAK,CAAC,8BAA8B,CAAC,CACjD,CACJ,CAAC,CACDC,QAAQ,CAAE,kBAACT,KAAK,CAAEE,MAAM,CAAK,CACzBF,KAAK,CAACL,KAAK,CAAGO,MAAM,CAACC,OAAO,CAACR,KAAK,CACtC,CAAC,CACDe,OAAO,CAAE,iBAACV,KAAK,CAAEE,MAAM,CAAK,CACxB,GAAMS,aAAY,CAAGX,KAAK,CAACL,KAAK,CAACiB,GAAG,CAAC,SAACC,IAAI,CAAK,CAC3C,GAAGA,IAAI,CAACC,GAAG,GAAKZ,MAAM,CAACC,OAAO,CAACY,OAAO,CAAE,MAAOb,OAAM,CAACC,OAAO,CAACU,IAAI,CAClE,MAAOA,KAAI,CACf,CAAC,CAAC,CACFb,KAAK,CAACL,KAAK,CAAGgB,YAAY,CAC9B,CACJ,CACJ,CAAC,CAAC,CAEK,uBAAwEf,SAAS,CAACoB,OAAO,CAAjFjB,OAAO,oBAAPA,OAAO,CAAEE,QAAQ,oBAARA,QAAQ,CAAEG,SAAS,oBAATA,SAAS,CAAEC,UAAU,oBAAVA,UAAU,CAAEI,QAAQ,oBAARA,QAAQ,CAAEC,OAAO,oBAAPA,OAAO,CAC1E;AAAA,+DACA,cAAed,UAAS,CAACqB,OAAO"},"metadata":{},"sourceType":"module","externalDependencies":[]}