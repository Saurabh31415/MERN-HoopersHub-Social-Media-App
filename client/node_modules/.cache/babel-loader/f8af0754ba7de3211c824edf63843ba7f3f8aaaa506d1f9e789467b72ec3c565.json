{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\saura\\\\Project\\\\client\\\\src\\\\scenes\\\\navbar\\\\index.jsx\",\n  _s = $RefreshSig$();\nimport { useState } from \"react\";\nimport { Box, IconButton, InputBase, Typography, Select, MenuItem, FormControl, useTheme, useMediaQuery } from \"@mui/material\";\nimport { Search, Message, DarkMode, LightMode, Notifications, Help, Menu, Close } from \"@mui/icons-material\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { setMode, setLogout } from \"state\";\nimport { useNavigate } from \"react-router-dom\";\nimport FlexBetween from \"components/FlexBetween.jsx\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Navbar = () => {\n  _s();\n  // the value to determine if we want of open MobileMenu when its in samll screens\n  const [isMobileMenuToggled, setIsMenuToggled] = useState(false);\n  const dispatch = useDispatch();\n  const navigate = useNavigate();\n  const user = useSelector(state => state.user);\n  const isNonMobileScreens = useMediaQuery(\"(min-width: 100px)\");\n  const theme = useTheme();\n  const neutralLight = theme.palette.neutral.light;\n  const dark = theme.palette.neutral.dark;\n  const background = theme.palette.background.default;\n  const primaryLight = theme.palette.primary.light;\n  const alt = theme.palette.background.alt;\n  const fullName = `${user.firstName} ${user.lastName}`;\n\n  // clamp is used to set minimin, preferred, maximum value to the fontSize when the screen gets small or large\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"ram ram\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 17\n    }, this), \" \", /*#__PURE__*/_jsxDEV(FlexBetween, {\n      padding: \"1rem 6%\",\n      backgroundColor: alt,\n      children: /*#__PURE__*/_jsxDEV(FlexBetween, {\n        gap: \"1.75rem\",\n        children: [/*#__PURE__*/_jsxDEV(Typography, {\n          fontWeight: \"bold\",\n          fontSize: \"clamp(1rem, 2rem, 2.25rem)\",\n          color: \"primary\",\n          onClick: () => navigate(\"/home\"),\n          sx: {\n            \"&:hover\": {\n              color: primaryLight,\n              cursor: \"pointer\"\n            }\n          },\n          children: \"HoopersHub\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 50,\n          columnNumber: 13\n        }, this), isNonMobileScreens && /*#__PURE__*/_jsxDEV(FlexBetween, {\n          backgroundColor: neutralLight,\n          borderRadius: \"9px\",\n          gap: \"3rem\",\n          padding: \"0.1rem 1.5rem\",\n          children: [/*#__PURE__*/_jsxDEV(InputBase, {\n            placeholder: \"Search...\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 66,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(IconButton, {\n            children: /*#__PURE__*/_jsxDEV(Search, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 68,\n              columnNumber: 25\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 67,\n            columnNumber: 21\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 65,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 34\n    }, this), \";\"]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 47,\n    columnNumber: 12\n  }, this);\n};\n_s(Navbar, \"3rrQggwlpvsNONVGjSBHuFwvHVw=\", false, function () {\n  return [useDispatch, useNavigate, useSelector, useMediaQuery, useTheme];\n});\n_c = Navbar;\nexport default Navbar;\nvar _c;\n$RefreshReg$(_c, \"Navbar\");","map":{"version":3,"names":["useState","Box","IconButton","InputBase","Typography","Select","MenuItem","FormControl","useTheme","useMediaQuery","Search","Message","DarkMode","LightMode","Notifications","Help","Menu","Close","useDispatch","useSelector","setMode","setLogout","useNavigate","FlexBetween","Navbar","isMobileMenuToggled","setIsMenuToggled","dispatch","navigate","user","state","isNonMobileScreens","theme","neutralLight","palette","neutral","light","dark","background","default","primaryLight","primary","alt","fullName","firstName","lastName","color","cursor"],"sources":["C:/Users/saura/Project/client/src/scenes/navbar/index.jsx"],"sourcesContent":["import { useState } from \"react\";\r\nimport {\r\n    Box,\r\n    IconButton,\r\n    InputBase,\r\n    Typography,\r\n    Select,\r\n    MenuItem,\r\n    FormControl,\r\n    useTheme,\r\n    useMediaQuery\r\n} from \"@mui/material\";\r\nimport {\r\n    Search,\r\n    Message,\r\n    DarkMode,\r\n    LightMode,\r\n    Notifications,\r\n    Help,\r\n    Menu,\r\n    Close\r\n} from \"@mui/icons-material\";\r\n\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { setMode, setLogout } from \"state\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport FlexBetween from \"components/FlexBetween.jsx\";\r\n\r\nconst Navbar = () => {\r\n    // the value to determine if we want of open MobileMenu when its in samll screens\r\n    const [isMobileMenuToggled, setIsMenuToggled] = useState(false);\r\n    const dispatch = useDispatch();\r\n    const navigate = useNavigate();\r\n    const user = useSelector((state) => state.user);\r\n    const isNonMobileScreens = useMediaQuery(\"(min-width: 100px)\");\r\n\r\n    const theme = useTheme();\r\n    const neutralLight = theme.palette.neutral.light;\r\n    const dark = theme.palette.neutral.dark;\r\n    const background = theme.palette.background.default;\r\n    const primaryLight = theme.palette.primary.light;\r\n    const alt = theme.palette.background.alt;\r\n\r\n    const fullName = `${user.firstName} ${user.lastName}`;\r\n\r\n    // clamp is used to set minimin, preferred, maximum value to the fontSize when the screen gets small or large\r\n    return <div><h1>ram ram</h1> <FlexBetween padding=\"1rem 6%\" backgroundColor={alt}>\r\n        \r\n        <FlexBetween gap=\"1.75rem\">\r\n            <Typography\r\n                fontWeight=\"bold\"\r\n                fontSize=\"clamp(1rem, 2rem, 2.25rem)\"\r\n                color=\"primary\"\r\n                onClick={() => navigate(\"/home\")}\r\n                sx={{\r\n                    \"&:hover\": {\r\n                        color: primaryLight,\r\n                        cursor: \"pointer\",\r\n                    },\r\n                }}\r\n            >\r\n                HoopersHub    \r\n            </Typography> \r\n            {isNonMobileScreens && (\r\n                <FlexBetween backgroundColor={neutralLight} borderRadius=\"9px\" gap=\"3rem\" padding=\"0.1rem 1.5rem\">\r\n                    <InputBase placeholder= \"Search...\" />\r\n                    <IconButton>\r\n                        <Search />\r\n                    </IconButton> \r\n                </FlexBetween>\r\n            )}\r\n        </FlexBetween>\r\n\r\n        {/* DESKSTOP NAV */}\r\n        {/* {isNonMobileScreens ? (\r\n        <FlexBetween gap=\"2rem\">\r\n            <IconButton onClick={() => dispatch(setMode())}>\r\n                {theme.palette.mode === \"dark\" ? (\r\n                    <DarkMode sx={{ fontSize: \"25px\"}} />\r\n                ): (\r\n                    <LightMode sx={{ color: dark, fontSize: \"25px\"}} /> \r\n                )}\r\n            </IconButton>\r\n            <Message sx={{ fontSize: \"25px\"}} />\r\n            <Notifications sx={{ fontSize: \"25px\"}} />\r\n            <Help sx={{ fontSize: \"25px\"}} />\r\n            <FormControl variant=\"standard\" value={fullName}>\r\n                <Select\r\n                    value={fullName}\r\n                    sx={{\r\n                        backgroundColor: neutralLight,\r\n                        width: \"150px\",\r\n                        borderRadius: \"0.25rem\",\r\n                        padding: \"0.25rem 1rem\",\r\n                        \"& .MuiSvgIcon-root\": {\r\n                            pr: \"0.25rem\",\r\n                            width: \"3rem\"\r\n                        },\r\n                        \"& .MuiSelect-select:focus\": {\r\n                            backgroundColor: neutralLight\r\n                        }\r\n                    }}\r\n                    input={<InputBase />}\r\n                >\r\n                    <MenuItem value={fullName}>\r\n                        <Typography>{fullName}</Typography>\r\n                    </MenuItem>\r\n                    <MenuItem onClick={() => dispatch(setLogout)}>Log Out</MenuItem>\r\n                </Select>\r\n            </FormControl>\r\n        </FlexBetween>\r\n        ) : (\r\n        <IconButton\r\n        onClick={() => setIsMenuToggled(!isMobileMenuToggled)}\r\n        >\r\n            <Menu />\r\n        </IconButton>\r\n        )} */}\r\n\r\n        {/* MOBILE NAV */}\r\n        {/* {!isNonMobileScreens && isMobileMenuToggled && (\r\n            <Box\r\n                position=\"fixed\"\r\n                right=\"0\"\r\n                bottom=\"0\"\r\n                height=\"100%\"\r\n                zIndex=\"10\"\r\n                maxWidth=\"500px\"\r\n                minWidth=\"300px\"\r\n                backgroundColor={background}\r\n            > */}\r\n                {/* CLOSE ICON */}\r\n                {/* <Box display=\"flex\" justifyContent=\"flex-end\" p=\"1rem\">\r\n                    <IconButton\r\n                         onClick={() => setIsMenuToggled(!isMobileMenuToggled)}\r\n                    >\r\n                        <Close />\r\n                    </IconButton>\r\n                </Box> */}\r\n\r\n                {/* MENU ITEMS */}\r\n                {/* <FlexBetween\r\n                    display=\"flex\"\r\n                    flexDirection=\"column\"\r\n                    justifyContent=\"center\"\r\n                    alignItems=\"center\"\r\n                    gap=\"3rem\"\r\n                    >\r\n                    <IconButton\r\n                        onClick={() => dispatch(setMode())}\r\n                        sx={{ fontSize: \"25px\"}}\r\n                    >\r\n                        {theme.palette.mode === \"dark\" ? (\r\n                            <DarkMode sx={{ fontSize: \"25px\"}} />\r\n                        ): (\r\n                            <LightMode sx={{ color: dark, fontSize: \"25px\"}} /> \r\n                        )}\r\n                    </IconButton>\r\n                    <Message sx={{ fontSize: \"25px\"}} />\r\n                    <Notifications sx={{ fontSize: \"25px\"}} />\r\n                    <Help sx={{ fontSize: \"25px\"}} />\r\n                    <FormControl variant=\"standard\" value={fullName}>\r\n                        <Select\r\n                            value={fullName}\r\n                            sx={{\r\n                                backgroundColor: neutralLight,\r\n                                width: \"150px\",\r\n                                borderRadius: \"0.25rem\",\r\n                                padding: \"0.25rem 1rem\",\r\n                                \"& .MuiSvgIcon-root\": {\r\n                                    pr: \"0.25rem\",\r\n                                    width: \"3rem\"\r\n                                },\r\n                                \"& .MuiSelect-select:focus\": {\r\n                                    backgroundColor: neutralLight\r\n                                }\r\n                            }}\r\n                            input={<InputBase />}\r\n                        >\r\n                            <MenuItem value={fullName}>\r\n                                <Typography>{fullName}</Typography>\r\n                            </MenuItem>\r\n                            <MenuItem onClick={() => dispatch(setLogout)}>Log Out</MenuItem>\r\n                        </Select>\r\n                    </FormControl>\r\n                </FlexBetween>\r\n            </Box>\r\n        )} */}\r\n    </FlexBetween>;\r\n    </div>\r\n};\r\n\r\nexport default Navbar;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}