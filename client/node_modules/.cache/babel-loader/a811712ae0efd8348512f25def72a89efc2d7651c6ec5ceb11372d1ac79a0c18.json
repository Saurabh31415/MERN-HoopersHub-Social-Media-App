{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\saura\\\\Project\\\\client\\\\src\\\\scenes\\\\widgets\\\\PostsWidget.jsx\",\n  _s = $RefreshSig$();\nimport { useEffect } from \"react\";\nimport { useDispatch, useSelec, useSelector } from \"react-redux\";\nimport { setPosts } from \"state\";\nimport PostWidget from \"./PostWidget.jsx\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst PostsWidget = _ref => {\n  _s();\n  let {\n    userId,\n    isProfile = false\n  } = _ref;\n  const dispatch = useDispatch();\n  const posts = useSelector(state => state.posts);\n  const token = useSelector(state => state.token);\n  // two different api calls: one for all posts on home page and one for all posts on a profile page of that person\n  const getPosts = async () => {\n    const response = await fetch(\"http://localhost:3001/posts\", {\n      method: \"GET\",\n      headers: {\n        Authorization: `Bearer ${token}`\n      }\n    });\n    const data = await response.json();\n    dispatch(setPosts({\n      posts: data\n    }));\n  };\n  const getUserPosts = async () => {\n    const response = await fetch(`http://localhost:3001/posts/${userId}/posts`, {\n      method: \"GET\",\n      headers: {\n        Authorization: `Bearer ${token}`\n      }\n    });\n    const data = await response.json();\n    dispatch(setPosts({\n      posts: data\n    }));\n  };\n  useEffect(() => {\n    if (isProfile) {\n      getUserPosts();\n    } else {\n      getPosts();\n    }\n  }, []); // eslint-disable-line react-hooks/exhaustive-deps\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: posts.map(_ref2 => {\n      let {\n        _id,\n        userId,\n        firstName,\n        lastName,\n        description,\n        location,\n        picturePath,\n        userPicturePath,\n        likes,\n        comments\n      } = _ref2;\n      return /*#__PURE__*/_jsxDEV(PostWidget, {\n        postId: _id,\n        userId: userId,\n        name: `${firstName} ${lastName}`,\n        description: description,\n        location: location,\n        picturePath: picturePath,\n        userPicturePath: userPicturePath,\n        likes: likes,\n        comments: comments\n      }, _id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 21\n      }, this);\n    })\n  }, void 0, false);\n};\n_s(PostsWidget, \"7TqOh3V0nCSP3QUJlbitnmq7L8o=\", false, function () {\n  return [useDispatch, useSelector, useSelector];\n});\n_c = PostsWidget;\nexport default PostsWidget;\nvar _c;\n$RefreshReg$(_c, \"PostsWidget\");","map":{"version":3,"names":["useEffect","useDispatch","useSelec","useSelector","setPosts","PostWidget","PostsWidget","userId","isProfile","dispatch","posts","state","token","getPosts","response","fetch","method","headers","Authorization","data","json","getUserPosts","map","_id","firstName","lastName","description","location","picturePath","userPicturePath","likes","comments"],"sources":["C:/Users/saura/Project/client/src/scenes/widgets/PostsWidget.jsx"],"sourcesContent":["import { useEffect } from \"react\";\r\nimport { useDispatch, useSelec, useSelector } from \"react-redux\";\r\nimport { setPosts } from \"state\";\r\nimport PostWidget from \"./PostWidget.jsx\";\r\n\r\nconst PostsWidget = ({ userId, isProfile = false}) => {\r\n    const dispatch = useDispatch();\r\n    const posts = useSelector((state) => state.posts);\r\n    const token = useSelector((state) => state.token);\r\n    // two different api calls: one for all posts on home page and one for all posts on a profile page of that person\r\n    const getPosts = async() => {\r\n        const response = await fetch(\"http://localhost:3001/posts\", {\r\n            method: \"GET\",\r\n            headers: { Authorization: `Bearer ${token}`},\r\n        });\r\n        const data = await response.json();\r\n        dispatch(setPosts({ posts: data }));\r\n    };\r\n\r\n    const getUserPosts = async() => {\r\n        const response = await fetch(`http://localhost:3001/posts/${userId}/posts`, {\r\n            method: \"GET\",\r\n            headers: { Authorization: `Bearer ${token}`},\r\n        });\r\n        const data = await response.json();\r\n        dispatch(setPosts({ posts: data }));\r\n    };\r\n\r\n    useEffect(() => {\r\n        if (isProfile) {\r\n            getUserPosts();\r\n        } else {\r\n            getPosts();\r\n        }\r\n    }, []); // eslint-disable-line react-hooks/exhaustive-deps\r\n\r\n    return (\r\n        <>\r\n            {posts.map(\r\n                ({\r\n                    _id,\r\n                    userId,\r\n                    firstName,\r\n                    lastName,\r\n                    description,\r\n                    location,\r\n                    picturePath,\r\n                    userPicturePath,\r\n                    likes,\r\n                    comments,\r\n                }) => (\r\n                    <PostWidget \r\n                        key={_id}\r\n                        postId={_id}\r\n                        userId={userId}\r\n                        name={`${firstName} ${lastName}`}\r\n                        description={description}\r\n                        location={location}\r\n                        picturePath={picturePath}\r\n                        userPicturePath={userPicturePath}\r\n                        likes={likes}\r\n                        comments={comments}\r\n                    />\r\n                )\r\n            )}\r\n        </>\r\n    )\r\n};\r\n\r\nexport default PostsWidget;"],"mappings":";;AAAA,SAASA,SAAS,QAAQ,OAAO;AACjC,SAASC,WAAW,EAAEC,QAAQ,EAAEC,WAAW,QAAQ,aAAa;AAChE,SAASC,QAAQ,QAAQ,OAAO;AAChC,OAAOC,UAAU,MAAM,kBAAkB;AAAC;AAAA;AAE1C,MAAMC,WAAW,GAAG,QAAkC;EAAA;EAAA,IAAjC;IAAEC,MAAM;IAAEC,SAAS,GAAG;EAAK,CAAC;EAC7C,MAAMC,QAAQ,GAAGR,WAAW,EAAE;EAC9B,MAAMS,KAAK,GAAGP,WAAW,CAAEQ,KAAK,IAAKA,KAAK,CAACD,KAAK,CAAC;EACjD,MAAME,KAAK,GAAGT,WAAW,CAAEQ,KAAK,IAAKA,KAAK,CAACC,KAAK,CAAC;EACjD;EACA,MAAMC,QAAQ,GAAG,YAAW;IACxB,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,6BAA6B,EAAE;MACxDC,MAAM,EAAE,KAAK;MACbC,OAAO,EAAE;QAAEC,aAAa,EAAG,UAASN,KAAM;MAAC;IAC/C,CAAC,CAAC;IACF,MAAMO,IAAI,GAAG,MAAML,QAAQ,CAACM,IAAI,EAAE;IAClCX,QAAQ,CAACL,QAAQ,CAAC;MAAEM,KAAK,EAAES;IAAK,CAAC,CAAC,CAAC;EACvC,CAAC;EAED,MAAME,YAAY,GAAG,YAAW;IAC5B,MAAMP,QAAQ,GAAG,MAAMC,KAAK,CAAE,+BAA8BR,MAAO,QAAO,EAAE;MACxES,MAAM,EAAE,KAAK;MACbC,OAAO,EAAE;QAAEC,aAAa,EAAG,UAASN,KAAM;MAAC;IAC/C,CAAC,CAAC;IACF,MAAMO,IAAI,GAAG,MAAML,QAAQ,CAACM,IAAI,EAAE;IAClCX,QAAQ,CAACL,QAAQ,CAAC;MAAEM,KAAK,EAAES;IAAK,CAAC,CAAC,CAAC;EACvC,CAAC;EAEDnB,SAAS,CAAC,MAAM;IACZ,IAAIQ,SAAS,EAAE;MACXa,YAAY,EAAE;IAClB,CAAC,MAAM;MACHR,QAAQ,EAAE;IACd;EACJ,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC;;EAER,oBACI;IAAA,UACKH,KAAK,CAACY,GAAG,CACN;MAAA,IAAC;QACGC,GAAG;QACHhB,MAAM;QACNiB,SAAS;QACTC,QAAQ;QACRC,WAAW;QACXC,QAAQ;QACRC,WAAW;QACXC,eAAe;QACfC,KAAK;QACLC;MACJ,CAAC;MAAA,oBACG,QAAC,UAAU;QAEP,MAAM,EAAER,GAAI;QACZ,MAAM,EAAEhB,MAAO;QACf,IAAI,EAAG,GAAEiB,SAAU,IAAGC,QAAS,EAAE;QACjC,WAAW,EAAEC,WAAY;QACzB,QAAQ,EAAEC,QAAS;QACnB,WAAW,EAAEC,WAAY;QACzB,eAAe,EAAEC,eAAgB;QACjC,KAAK,EAAEC,KAAM;QACb,QAAQ,EAAEC;MAAS,GATdR,GAAG;QAAA;QAAA;QAAA;MAAA,QAUV;IAAA,CACL;EACJ,iBACF;AAEX,CAAC;AAAC,GA9DIjB,WAAW;EAAA,QACIL,WAAW,EACdE,WAAW,EACXA,WAAW;AAAA;AAAA,KAHvBG,WAAW;AAgEjB,eAAeA,WAAW;AAAC;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}